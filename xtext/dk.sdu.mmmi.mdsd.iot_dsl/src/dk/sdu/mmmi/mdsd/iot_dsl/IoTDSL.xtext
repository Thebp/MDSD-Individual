grammar dk.sdu.mmmi.mdsd.iot_dsl.IoTDSL with org.eclipse.xtext.common.Terminals

generate ioTDSL "http://www.sdu.dk/mmmi/mdsd/iot_dsl/IoTDSL"

System:
	mqtt=Mqtt componenttypes+=ComponentType* server=Server boards+=Board+ logic+=Logic+ expose+=Expose*
;

Mqtt:
	'mqtt' '(' 'host' '=' host=(STRING | IP) ',' 'user' '=' user=STRING ',' 'pass' '=' pass=STRING ',' 'port' '=' port=INT ')'
;

ComponentType:
	({SensorType} 'sensortype' | {ActuatorType} 'actuatortype') name=ID ":" BEGIN external=External? properties+=Property* END
;

Property:
	"property" type=PropertyType name=ID
;

PropertyType:
	"string" | "integer" | "float" | "boolean"
;

External:
	"external" name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')'
;

Parameter:
	name=ID
;

Server:
	'server' ':' BEGIN 'host' '=' host=Host 'port' '=' port=INT END
;

Host:
	STRING | IP
;

IP:
	INT '.' INT '.' INT '.' INT
;

Board:
	'board' name=ID ':'
	BEGIN
		elements+=Element+
	END
;

Element:
	WiFi | Component
;

WiFi:
	'wifi' '(' 'ssid' '=' ssid=STRING ',' 'pass' '=' pass=STRING ')'
;

Component:
	name=ID type=[ComponentType] '(' args+=Argument? (',' args+=Argument)* ')' rate=Rate?
;

Rate:
	'every' time=INT timeUnit=TimeUnit
;

Argument:
	STRING | INT
;

Logic:
	Loop | Statement
;

Loop:
	'every' time=INT timeunit=TimeUnit 'do' BEGIN statements+=Statement+ END
;

TimeUnit:
	'hours' | 'minutes' | 'seconds'
;

Statement:
	((Variable | Assignment) ";"?) | If
;

Variable:
	'var' name=ID '=' exp=Expression
;

Expression:
	Reference | Number | Text | Average | Percentage
;

Percentage:
	value=INT '%'
;

Reference:
	ref=[Variable] | PropertyUse
;

PropertyUse:
	((board=[Board] '.' component=[Component])| ('*' '.' componenttype=[ComponentType])) '.' property=[Property]
;

Number:
	value=INT
;

Text:
	value=STRING
;

Average:
	'average' '(' Reference ')'
;

If:
	'if' condition=Condition 'then' BEGIN statements+=Statement+  END elseifs+=ElseIf* else=Else?
;

Condition:
	Expression | Comparison
;

Comparison:
	left=Expression COp right=Expression
;

COp:
	'<' | '>' | '<=' | '>=' | '==' | '!='
;

ElseIf:
	'elseif' condition=Condition 'then' BEGIN statements+=Statement+ END
;

Else:
	'else' BEGIN statements+=Statement+ END
;

Assignment:
	ref=Reference '=' exp=Expression
;


Expose:
	'expose' name=ID BEGIN statements+=Statement+ END
;

terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';